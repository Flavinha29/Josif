# Generated by Django 5.2.4 on 2025-07-21 22:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GeneroLiterario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, verbose_name='Gênero Literário')),
            ],
            options={
                'verbose_name': 'Gênero Literário',
                'verbose_name_plural': 'Gêneros Literários',
            },
        ),
        migrations.CreateModel(
            name='Recompensa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Recompensa')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('pontos_necessarios', models.IntegerField(verbose_name='Pontos necessários')),
                ('imagem', models.ImageField(blank=True, null=True, upload_to='recompensas/', verbose_name='Ícone da Recompensa')),
            ],
            options={
                'verbose_name': 'Recompensa',
                'verbose_name_plural': 'Recompensas',
            },
        ),
        migrations.CreateModel(
            name='Pessoa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de nascimento')),
                ('pontos_leitura', models.IntegerField(default=0, verbose_name='Pontos acumulados')),
                ('foto_perfil', models.ImageField(blank=True, null=True, upload_to='perfis/', verbose_name='Foto de perfil')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Pessoa',
                'verbose_name_plural': 'Pessoas',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Livro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título')),
                ('autor', models.CharField(max_length=100, verbose_name='Autor')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('capa', models.ImageField(blank=True, null=True, upload_to='capas/', verbose_name='Capa do Livro')),
                ('paginas', models.IntegerField(default=0, verbose_name='Número de páginas')),
                ('faixa_etaria', models.CharField(default='Livre', max_length=20, verbose_name='Faixa etária recomendada')),
                ('genero', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.generoliterario', verbose_name='Gênero')),
            ],
            options={
                'verbose_name': 'Livro',
                'verbose_name_plural': 'Livros',
            },
        ),
        migrations.CreateModel(
            name='DesafioLeitura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título do Desafio')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_inicio', models.DateField(verbose_name='Data de início')),
                ('data_fim', models.DateField(verbose_name='Data de término')),
                ('ativo', models.BooleanField(default=True, verbose_name='Desafio ativo')),
                ('livros', models.ManyToManyField(to='app.livro', verbose_name='Livros do desafio')),
            ],
            options={
                'verbose_name': 'Desafio de Leitura',
                'verbose_name_plural': 'Desafios de Leitura',
            },
        ),
        migrations.CreateModel(
            name='ProgressoLeitura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('L', 'Lendo'), ('C', 'Concluído')], default='L', max_length=1, verbose_name='Status')),
                ('data_inicio', models.DateField(auto_now_add=True, verbose_name='Data de início')),
                ('data_fim', models.DateField(blank=True, null=True, verbose_name='Data de conclusão')),
                ('progresso_paginas', models.IntegerField(default=0, verbose_name='Páginas lidas')),
                ('estudante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Estudante')),
                ('livro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.livro', verbose_name='Livro')),
            ],
            options={
                'verbose_name': 'Progresso de Leitura',
                'verbose_name_plural': 'Progressos de Leitura',
            },
        ),
        migrations.CreateModel(
            name='RankingLeitura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pontos_totais', models.IntegerField(default=0, verbose_name='Pontos totais')),
                ('periodo', models.CharField(choices=[('M', 'Mensal'), ('A', 'Anual')], max_length=1, verbose_name='Período')),
                ('data_registro', models.DateField(auto_now_add=True, verbose_name='Data do registro')),
                ('estudante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Estudante')),
            ],
            options={
                'verbose_name': 'Ranking de Leitura',
                'verbose_name_plural': 'Rankings de Leitura',
            },
        ),
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Nota (1-5)')),
                ('comentario', models.TextField(blank=True, verbose_name='Comentário')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data da avaliação')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('livro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.livro', verbose_name='Livro')),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'unique_together': {('livro', 'usuario')},
            },
        ),
    ]
